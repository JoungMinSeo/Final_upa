<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	<!-- DispatcherServlet이란?
		모든 요청을 프레젠테이션 계층 제일 앞에서 받아 들여 처리하는 역할의 프론트 컨트롤러
		 + 내부에 view Resolver가 작성되어 있어 컨트롤러에서 반환되는
		 	jsp 파일의 이름을 이용해 요청 위임을 진행해줌. (모든 요청, 응답을 제어하는 관제탑)
	 -->
	
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- annotation-driven : @Controller에 요청을 전달하기 위한
							HandlerMapping 요소를 Bean으로 등록함
		해당 태그가 작성되어 있어야지만
		@RequestMapping, @ExceptionHandler 를 사용할 수 있다.		
	 -->
	 
	<annotation-driven />
	<!-- annotation-driven @ 사용할 수 있게 하는 구문-->

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- View Resolver : 컨트롤러에서 반환된 jsp 이름을 토대로 알맞은 jsp를 검색하여
						요청 위임하는 역할
						prefix : 접두사 / suffix : 접미사
	 -->
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="edu.fin.upa" />
	<!-- 
		component-scan : 지정된 패키지에 있는 @Component와
		그 구체화 요소(@Controller,@Service,@Repository) 모두 스캔하여 Bean으로 등록하는 태그
		
		Bean == 스프링 컨테이너(IoC 컨테이너)가 관리하는 객체
			== 스프링이 마음대로 제어할 수 있는 객체	
	 -->
	      
 	<beans:bean id="autoLoginInterceptor" class="edu.fin.upa.member.commons.interceptor.AutoLoginInterceptor"/>
	<interceptors>
		<interceptor>
			<mapping path="/**"/>
			<beans:ref bean="autoLoginInterceptor"/>
		</interceptor>
	</interceptors>
	
	
	<!-- CardWebSocketHandler 클래스를 bean으로 등록 -->
	<beans:bean id="cardHandler" class="edu.fin.upa.card.websocket.CardWebsocketHandler" />
		
	<!-- /card 라는 주소로 오는 웹소켓 요청을 CardWebSocketHandler 클래스와 연결하기  -->
	<websocket:handlers>
		<websocket:mapping handler="cardHandler" path="/cardScript" />
		<websocket:handshake-interceptors>
			<beans:bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
		</websocket:handshake-interceptors>
		<websocket:sockjs/>
	</websocket:handlers>
	
	
	 
</beans:beans>